import streamlit as st
import difflib
import pandas as pd
from datetime import datetime

# ---------- USTAWIENIA STRONY ----------
st.set_page_config(page_title="Ocena t≈Çumacze≈Ñ ‚Äì wersja nauczycielska", layout="wide")

# ---------- POMOCNICZE ----------
def compute_best_match(student_text: str, refs: list[str]):
    """Zwraca (best_score, best_ref, diff_preview_text)."""
    best_ref, best_score = "", 0.0
    for ref in refs:
        score = difflib.SequenceMatcher(None, student_text.lower(), ref.lower()).ratio()
        if score > best_score:
            best_score, best_ref = score, ref

    # R√≥≈ºnice (podglƒÖd) ‚Äì skr√≥cone, ≈ºeby by≈Ço czytelne
    diff_tokens = list(difflib.ndiff(student_text.split(), best_ref.split()))
    # utnij do 200 token√≥w w podglƒÖdzie
    if len(diff_tokens) > 200:
        diff_tokens = diff_tokens[:200] + ["..."]
    diff_preview = " ".join(diff_tokens)

    return best_score, best_ref, diff_preview


def auto_feedback(sim: float, faith: int, langq: int, style: int) -> str:
    """Kr√≥tki komentarz generowany na podstawie podobie≈Ñstwa i rubryki."""
    tips = []
    if sim < 0.7:
        tips.append("Rozwa≈º doprecyzowanie wierno≈õci wzglƒôdem sensu orygina≈Çu (parafrazy vs. znaczenie).")
    if faith <= 3:
        tips.append("Wzmocnij wierno≈õƒá przek≈Çadu: sprawd≈∫ kompletno≈õƒá informacji i unikanie nadinterpretacji.")
    if langq <= 3:
        tips.append("Popracuj nad poprawno≈õciƒÖ jƒôzykowƒÖ i kolokacjami w jƒôzyku docelowym.")
    if style <= 3:
        tips.append("Zadbaj o rejestr i naturalno≈õƒá ‚Äì p≈Çynno≈õƒá sk≈Çadni i dob√≥r s≈Çownictwa.")
    if not tips:
        return "Bardzo dobre t≈Çumaczenie: wierne, poprawne i naturalne. ≈öwietna robota!"
    return " ".join(tips)


def ensure_results_df():
    if "results_df" not in st.session_state:
        st.session_state.results_df = pd.DataFrame(
            columns=[
                "Data", "Student", "Zadanie/Plik", "Podobie≈Ñstwo",
                "Wierno≈õƒá(1-5)", "Jƒôzyk(1-5)", "Styl(1-5)",
                "Komentarz", "Najbli≈ºszy wzorzec", "T≈Çumaczenie studenta"
            ]
        )


# ---------- SIDEBAR ----------
with st.sidebar:
    st.markdown("### ‚öôÔ∏è Instrukcja")
    st.markdown(
        "- Wklej **tekst ≈∫r√≥d≈Çowy** (dla kontekstu), **t≈Çumaczenie studenta** i **kilka wzorc√≥w** (ka≈ºdy w nowej linii).\n"
        "- Uzupe≈Çnij **rubrykƒô**.\n"
        "- Kliknij **Oce≈Ñ t≈Çumaczenie**.\n"
        "- Wyniki pojawiƒÖ siƒô poni≈ºej i trafiƒÖ do tabeli z mo≈ºliwo≈õciƒÖ **pobrania CSV**."
    )
    st.caption("Uwaga: podobie≈Ñstwo jest literalne (tekstu do tekstu). "
               "Dla elastycznych wariant√≥w u≈ºywaj kilku wzorc√≥w, by uniknƒÖƒá krzywdzƒÖcych ocen.")

st.title("üìò Ocena t≈Çumacze≈Ñ student√≥w ‚Äî wersja nauczycielska")

# ---------- FORMULARZ DANYCH ----------
col_left, col_right = st.columns([2, 1])

with col_left:
    st.subheader("Dane wej≈õciowe")
    student_name = st.text_input("üë§ Imiƒô i nazwisko studenta", "")
    assignment_name = st.text_input("üóÇÔ∏è Nazwa zadania / pliku (opcjonalnie)", "")

    source_text = st.text_area("üßæ Tekst ≈∫r√≥d≈Çowy (dla kontekstu, opcjonalnie)", height=120,
                               placeholder="Wklej orygina≈Ç (PL lub EN) ‚Äî opcjonalnie.")
    student_translation = st.text_area("‚úçÔ∏è T≈Çumaczenie studenta", height=160,
                                       placeholder="Wklej t≈Çumaczenie studenta, kt√≥re chcesz oceniƒá.")
    reference_translations = st.text_area(
        "‚úÖ T≈Çumaczenia wzorcowe (jedno wiersz = jeden wzorzec)",
        height=160,
        placeholder="Wklej kilka poprawnych t≈Çumacze≈Ñ, ka≈ºde w nowej linii.\n"
                    "Np.\nHe has lived in Warsaw for five years.\nHe‚Äôs been living in Warsaw for five years."
    )

with col_right:
    st.subheader("Rubryka oceny")
    faithfulness = st.slider("Wierno≈õƒá (1‚Äì5)", 1, 5, 4)
    language_quality = st.slider("Poprawno≈õƒá jƒôzykowa (1‚Äì5)", 1, 5, 4)
    style = st.slider("Styl / naturalno≈õƒá (1‚Äì5)", 1, 5, 4)

    st.subheader("Komentarz nauczyciela")
    teacher_comment = st.text_area("Wpisz w≈Çasny komentarz (opcjonalnie)", height=140)

# ---------- PRZYCISK OCENY ----------
if st.button("üîé Oce≈Ñ t≈Çumaczenie", type="primary"):
    if not student_translation.strip():
        st.error("Wprowad≈∫ t≈Çumaczenie studenta.")
    elif not reference_translations.strip():
        st.error("Wprowad≈∫ co najmniej jedno t≈Çumaczenie wzorcowe.")
    else:
        refs_list = [r.strip() for r in reference_translations.split("\n") if r.strip()]
        sim, best_ref, diff_preview = compute_best_match(student_translation, refs_list)

        st.success("Analiza zako≈Ñczona.")
        st.markdown("#### Najbli≈ºsze t≈Çumaczenie wzorcowe")
        st.write(best_ref if best_ref else "‚Äî")
        st.metric("Podobie≈Ñstwo (literalne)", f"{sim:.0%}")

        with st.expander("PodglƒÖd r√≥≈ºnic (skr√≥t)"):
            st.code(diff_preview)

        # Komentarz automatyczny + zlepienie z komentarzem nauczyciela
        auto_fb = auto_feedback(sim, faithfulness, language_quality, style)
        final_comment = auto_fb if not teacher_comment.strip() else f"{auto_fb}\n\n{teacher_comment.strip()}"

        st.markdown("#### Rubryka (Twoja ocena)")
        st.write(f"- **Wierno≈õƒá:** {faithfulness}/5")
        st.write(f"- **Poprawno≈õƒá jƒôzykowa:** {language_quality}/5")
        st.write(f"- **Styl / naturalno≈õƒá:** {style}/5")
        st.markdown("#### Komentarz dla studenta")
        st.write(final_comment)

        # Zapis do tabeli wynik√≥w (sesja)
        ensure_results_df()
        new_row = {
            "Data": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Student": student_name or "‚Äî",
            "Zadanie/Plik": assignment_name or "‚Äî",
            "Podobie≈Ñstwo": round(sim, 3),
            "Wierno≈õƒá(1-5)": faithfulness,
            "Jƒôzyk(1-5)": language_quality,
            "Styl(1-5)": style,
            "Komentarz": final_comment,
            "Najbli≈ºszy wzorzec": best_ref,
            "T≈Çumaczenie studenta": student_translation,
        }
        st.session_state.results_df = pd.concat(
            [st.session_state.get("results_df", pd.DataFrame(columns=list(new_row.keys()))),
             pd.DataFrame([new_row])],
            ignore_index=True
        )

# ---------- WYNIKI ZBIORCZE ----------
ensure_results_df()
st.markdown("---")
st.subheader("üìä Zebrane wyniki (sesja)")
st.dataframe(st.session_state.results_df, use_container_width=True)

# Pobieranie CSV
csv_data = st.session_state.results_df.to_csv(index=False).encode("utf-8")
st.download_button("‚¨áÔ∏è Pobierz wyniki jako CSV", data=csv_data, file_name="wyniki_tlumaczen.csv", mime="text/csv")
